#Load utility functions
source("C://Users//chris//OneDrive//Documentos//GitHub//ML_SelfHealingUtility//loadData.R");
library(xgboost)
library(r2pmml) #https://github.com/jpmml/r2pmml
a <- {1.4, 2.5, 3.1, 5.5}
a <- c(1.4, 2.5, 3.1, 5.5)
b <- c(2.1, 3.9, 4.3, 6.7)
sd(a)
sd(b)
1/2*100
100 * 1/2
100 * 2/3
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
#Download and install the latest H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
library(h2o)
h2o.init()
demo(h2o.kmeans)
install.packages("gbm")
install.packages("devtools")
install_git("git://github.com/jpmml/r2pmml.git")
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
#Data structure to keep results
mcResultsf <- data.frame(matrix(data=NA,nrow=3,ncol=8));
colnames(mcResultsf) <- c("DataSet","Train_RMSE_MEAN","Train_RMSE_STD","Test_RMSE_MEAN",
"Test_RMSE_STD","RMSE","R_Squared", "MAPD");
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
modelList <- c("Linear","Discontinuous","Saturating","ALL");
modelName <- modelList[1];
datasetSize <- c("1K","3K","9K");
datasetName <- generateDataSetNames(modelName,datasetSize,0);
# Generate the dataset names that will be trained ----------------------------
generateDataSetNames <- function(modelName,datasetSize,s_idx){
if(s_idx==0 & length(datasetSize)>0){#Generate for all sizes
datasetName <- paste0(modelName,datasetSize[1]);
for(i in c(2:length(datasetSize))){
datasetName <- cbind(datasetName,paste0(modelName,datasetSize[i]));
}
}
else{
datasetName <- paste0(modelName,datasetSize[s_idx]);
}
return(datasetName);
}
# Save results to file ----------------------------------------------------
resultsToFile <- function(mcResults,modelName,extension){
fileName <- paste0("mcResultsf_",modelName,extension);
write.table(mcResults,fileName,sep=",",col.names = TRUE);
print(paste0("file written:",fileName));
mcResults
}
# Prepare features --------------------------------------------------------
prepareFeatures <- function(dataf,selectionType){
#Do feature selection (or not)
if(selectionType=="ALL")
featuresdf<- select_ALL(dataf)
else
if(selectionType=="Linear")
featuresdf<- select_Linear(dataf)
else
if(selectionType=="Discontinuous")
featuresdf<- select_Discontinuous(dataf)
else
if(selectionType=="Saturating")
featuresdf<- select_Saturation(dataf)
#Remove zero utilities
featuresdf <- featuresdf[featuresdf$UTILITY_INCREASE!=0,];
# Scramble data
featuresdf <- scrambleData(datadf=featuresdf);
return (featuresdf);
}
library(devtools)
library(xgboost)
library(lightgbm, quietly=TRUE)
library(r2pmml) #https://github.com/jpmml/r2pmml
library(lgbm)
devtools::install_github("Laurae2/lgbdl", force = TRUE)
lgb.dl(commit = "master",
compiler = "vs",
repo = "https://github.com/Microsoft/LightGBM")
library(lightgbm)
install_github("Microsoft/LightGBM", subdir = "R-package")
install.packages("devtools")
library(devtools)
install_github("Microsoft/LightGBM", subdir = "R-package")
library(devtools)
options(devtools.install.args = "--no-multiarch") # if you have 64-bit R only, you can skip this
install_github("Microsoft/LightGBM", subdir = "R-package")
install_github("Microsoft/LightGBM", subdir = "R-package")
library(lightgbm)
data(agaricus.train, package='lightgbm')
train <- agaricus.train
dtrain <- lgb.Dataset(train$data, label=train$label)
params <- list(objective="regression", metric="l2")
model <- lgb.cv(params, dtrain, 10, nfold=5, min_data=1, learning_rate=1, early_stopping_rounds=10)
## Control code to run Random Fores
#https://machinelearningmastery.com/tune-machine-learning-algorithms-in-r/
library(randomForest)
library(caret)
library(devtools)
library(r2pmml) #https://github.com/jpmml/r2pmml
# Initialization section ------------------------------------------------------
#Load utility functions
source("C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//loadData.R");
#Data structure to keep results
#Folder with training data
folder <- "C://Users//Chris//Documents//GitHub//ML_SelfHealingUtility//data//DataPoints_1K-3K-9K//";
#folder <- "//DataPoints_1K-3K-9K//";
model.name.list <- c("Linear","Discontinuous","Saturating","ALL");
model.name <- model.name.list[2];
method.name <- "RF";
dataset.name.list <- generateDataSetNames(model.name, c("1K","2K","9K"),3);
results.df <- data.frame(matrix(data=NA,nrow=1000,ncol=14));
colnames(results.df) <- c("Item","Utility_Type","RMSE","R_Squared", "MADP","User_Time","Sys_Time","Elapsed_Time",
"Number_of_Trees","Learning_Rate","Max_Depth","Train_Split","Min_Data_In_Leaf","Bagging_Fraction");
results_line <- 0;
#load the package
library(markovchain)
#load the package
install.packages("markovchain")
library(markovchain)
tmA <- matrix(c(0,0.5,0.5,.5,0,.5,.5,.5,0),nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("a","b","c"),
name="MarkovChain A") #create the DTMC
dtmcA
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
dtmcA
plot(dtmcA)
tmA <- matrix(c(0,1.4,0.5,.5,0,.5,.5,.5,0),nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
tmA <- matrix(c(0.1,.4,0.5,.5,0,.5,.5,.5,0),nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
dtmcA
plot(dtmcA)
tmA <- matrix(c(0.3,0.3,0.4,0.3,0,0.3,0.4,0.4,0.3),nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
tmA <- matrix(c(0.3,0.3,0.4,0.3,0,0.3,0.3,0.3,0.4),nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
tmA <- matrix(c(0.3,0.3,0.4,
0.3,0.4,0.3,
0.3,0.3,0.4),
nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
dtmcA
plot(dtmcA)
tmA <- matrix(c(0.4,0.3,0.3,
0.3,0.4,0.3,
0.3,0.3,0.4),
nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
dtmcA
plot(dtmcA)
plot(dtmcA, col=red,pch=16)
library(markovchain)
tmA <- matrix(c(0.4,0.3,0.3,
0.3,0.4,0.3,
0.3,0.3,0.4),
nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
dtmcA
plot(dtmcA, col="red",pch=16)
dtmcA[yes,no]
dtmcA["yes","no"]
#Simulate states distribution after n-steps
initialState<-c(0,1,0)
steps<-4
finalState<-initialState*dtmcA^steps #using power operator
finalState
steps<-40
finalState<-initialState*dtmcA^steps #using power operator
finalState
#Simulate states distribution after n-steps
initialState<-c(0,1,0)
steps<-2
finalState<-initialState*dtmcA^steps #using power operator
finalState
#
steadyStates(dtmcA) #
tmA <- matrix(c(0.1,0.5,0.3,
0.3,0.4,0.3,
0.3,0.3,0.4),
nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
dtmcA
plot(dtmcA, col="red",pch=16)
dtmcA["yes","no"] #Probability of transitionting from Yes to No.
#Simulate states distribution after n-steps
initialState<-c(0,1,0)
tmA <- matrix(c(0.1,0.5,0.3,
0.3,0.4,0.3,
0.3,0.3,0.4),
nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
dtmcA
plot(dtmcA, col="red",pch=16)
tmA <- matrix(c(0.1,0.5,0.3,
0.3,0.4,0.3,
0.3,0.3,0.4),
nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
tmA <- matrix(c(0.1,0.3,0.3,
0.5,0.4,0.3,
0.3,0.3,0.4),
nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
tmA <- matrix(c(0.1,0.6,0.3,
0.3,0.4,0.3,
0.3,0.3,0.4),
nrow = 3,
byrow = TRUE) #define the transition matrix
dtmcA <- new("markovchain",transitionMatrix=tmA,
states=c("yes","no","idk"),
name="MarkovChain A") #create the DTMC
dtmcA
p <- plot(dtmcA, col="red",pch=16)
p
dtmcA["yes","no"] #Probability of transitionting from Yes to No.
#Simulate states distribution after n-steps
initialState<-c(0,1,0)
steps<-2
finalState<-initialState*dtmcA^steps #using power operator
finalState
#
steadyStates(dtmcA) #
install.packages("farff")
library(farff)
setwd("C://Users//Chris//Documents//GitHub//DW_Microtasks//output//");
experiment1_fileName = "consolidated_Final_Experiment_1.arff";
experiment2_fileName = "consolidated_Final_Experiment_2.arff"
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(),
convert.to.logicals = TRUE, show.info = TRUE)
summary(data_1)
data_1 <- final[complete.cases(data_1), ]
data_1 <- data_1[complete.cases(data_1), ]
head(data_1)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
data_1 <- data_1[complete.cases(data_1), ]
head(data_1)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
head(data_1)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
head(data_1)
summary(data_1)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
summary(data_1)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
summary(data_1)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
data_1 <- readARFF(experiment1_fileName, data.reader = "readr", tmp.file = tempfile(), show.info = TRUE)
summary(data_1)
